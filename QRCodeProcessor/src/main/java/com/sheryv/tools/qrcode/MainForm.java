package com.sheryv.tools.qrcode;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Map;

public class MainForm extends JFrame {
  private final CodeGenerator generator;
  private final CodeFileReader reader;
  private JTabbedPane tabbedPane1;
  private JTabbedPane tabbedPane2;
  private JLabel image;
  private JButton readFromFileButton;
  private JButton generateButton;
  private JTextArea inputText;
  private JTextArea inputBase64;
  private JTextArea outputText;
  private JTextArea outputBase64;
  private JPanel rootPanel;
  private JButton saveButton;
  private BufferedImage bufferedImage;
  
  public MainForm(CodeGenerator generator, CodeFileReader reader) throws HeadlessException {
    this.generator = generator;
    this.reader = reader;
    setTitle("QRCode Processor - ShvTools");
    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setContentPane(rootPanel);
    Toolkit kit = Toolkit.getDefaultToolkit();
    setIconImages(Arrays.asList(
        kit.createImage(ClassLoader.getSystemResource("icon-16x.png")),
        kit.createImage(ClassLoader.getSystemResource("icon-32x.png")),
        kit.createImage(ClassLoader.getSystemResource("icon.png"))
    ));
    
    generateButton.addActionListener(e -> {
      Format format = getFormatByTab(tabbedPane1);
      String text = format == Format.PLAIN ? inputText.getText() : inputBase64.getText();
      bufferedImage = generator.generate(text, format, 300);
      image.setIcon(new ImageIcon(bufferedImage));
      saveButton.setEnabled(true);
    });
    
    readFromFileButton.addActionListener(e -> {
      JFileChooser fc = new JFileChooser();
  
      if (fc.showOpenDialog(rootPanel) == JFileChooser.APPROVE_OPTION) {
        Map<Format, String> read = reader.read(fc.getSelectedFile().toPath());
        outputText.setText(read.get(Format.PLAIN));
        outputBase64.setText(read.get(Format.BASE64));
      }
    });
    
    saveButton.addActionListener(e -> {
      if (bufferedImage != null) {
        JFileChooser fc = new JFileChooser();
        fc.setSelectedFile(new File("qr-code.jpg"));
        fc.setFileFilter(new FileNameExtensionFilter("JPG file", "jpg"));
        
        if (fc.showSaveDialog(rootPanel) == JFileChooser.APPROVE_OPTION) {
          try {
            File path = fc.getSelectedFile();
            if (!path.getAbsolutePath().endsWith(".jpg")) {
              path = new File(path.getAbsolutePath() + ".jpg");
            }
            
            ImageIO.write(bufferedImage, "jpg", path);
          } catch (IOException ioException) {
            ioException.printStackTrace();
          }
        }
      }
    });
    
    setSize(800, 400);
    setMinimumSize(new Dimension(650, 400));
    UIManager.put("TabbedPane.hasFullBorder", true);
    setVisible(true);
  }
  
  
  private Format getFormatByTab(JTabbedPane pane) {
    JScrollPane selectedComponent = (JScrollPane) pane.getSelectedComponent();
    Component component = selectedComponent.getViewport().getComponents()[0];
    if (component == inputText || component == outputText) return Format.PLAIN;
    if (component == inputBase64 || component == outputBase64) return Format.BASE64;
    throw new IllegalStateException("Unknown component " + component);
  }
  
  
  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }
  
  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    rootPanel = new JPanel();
    rootPanel.setLayout(new GridBagLayout());
    rootPanel.setPreferredSize(new Dimension(800, 400));
    tabbedPane1 = new JTabbedPane();
    tabbedPane1.setName("");
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 0.8;
    gbc.weighty = 0.5;
    gbc.fill = GridBagConstraints.BOTH;
    rootPanel.add(tabbedPane1, gbc);
    final JScrollPane scrollPane1 = new JScrollPane();
    tabbedPane1.addTab("Input plain text", scrollPane1);
    inputText = new JTextArea();
    inputText.setRows(10);
    scrollPane1.setViewportView(inputText);
    final JScrollPane scrollPane2 = new JScrollPane();
    tabbedPane1.addTab("Base64", scrollPane2);
    inputBase64 = new JTextArea();
    inputBase64.setRows(10);
    scrollPane2.setViewportView(inputBase64);
    final JPanel spacer1 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.VERTICAL;
    rootPanel.add(spacer1, gbc);
    final JPanel spacer2 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.fill = GridBagConstraints.VERTICAL;
    rootPanel.add(spacer2, gbc);
    tabbedPane2 = new JTabbedPane();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 4;
    gbc.weighty = 0.5;
    gbc.fill = GridBagConstraints.BOTH;
    rootPanel.add(tabbedPane2, gbc);
    final JScrollPane scrollPane3 = new JScrollPane();
    tabbedPane2.addTab("Decoded plain text", scrollPane3);
    outputText = new JTextArea();
    outputText.setEditable(false);
    outputText.setRows(10);
    scrollPane3.setViewportView(outputText);
    final JScrollPane scrollPane4 = new JScrollPane();
    tabbedPane2.addTab("Base64", scrollPane4);
    outputBase64 = new JTextArea();
    outputBase64.setEditable(false);
    outputBase64.setRows(10);
    scrollPane4.setViewportView(outputBase64);
    image = new JLabel();
    image.setText("");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.gridheight = 6;
    gbc.weightx = 0.2;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.WEST;
    rootPanel.add(image, gbc);
    final JPanel spacer3 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 3;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    rootPanel.add(spacer3, gbc);
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new BorderLayout(0, 0));
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.BOTH;
    rootPanel.add(panel1, gbc);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));
    panel1.add(panel2, BorderLayout.EAST);
    generateButton = new JButton();
    generateButton.setAlignmentX(1.0f);
    generateButton.setText("Generate");
    panel2.add(generateButton);
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
    panel2.add(panel3);
    saveButton = new JButton();
    saveButton.setEnabled(false);
    saveButton.setText("Save to file");
    panel2.add(saveButton);
    readFromFileButton = new JButton();
    readFromFileButton.setContentAreaFilled(true);
    readFromFileButton.setHorizontalAlignment(0);
    readFromFileButton.setInheritsPopupMenu(false);
    readFromFileButton.setLabel("Read from file");
    readFromFileButton.setText("Read from file");
    panel1.add(readFromFileButton, BorderLayout.WEST);
    final JPanel spacer4 = new JPanel();
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    rootPanel.add(spacer4, gbc);
  }
  
  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return rootPanel;
  }
  
}
