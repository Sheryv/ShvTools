import java.util.regex.Pattern



//buildscript {
//    repositories {
//        maven {
//            url = uri("https://plugins.gradle.org/m2/")
//        }
//    }
//    dependencies {
//        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${ext.kotlin}")
//    }
//}
plugins {
    id 'java'
    id 'maven-publish'
}

String kotlin = '1.7.10'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.11
    targetCompatibility = 1.11
    ext.author = "Sheryv"
    ext.longName = "ShvTools root"
    ext.className = ""
    ext.site = 'https://github.com/Sheryv/ShvTools'
    ext.kotlin_version = kotlin
    ext.kotlin_plugin_version = '1.7.10'
    ext.shortVersion = "0.1"

    group = 'com.sheryv'

    task fatJar(type: Jar) {
        afterEvaluate { p ->
            manifest {
                attributes 'Implementation-Title': p.longName,
                        'Implementation-Version': p.version,
                        'Implementation-Vendor': p.author + ', ' + p.site,
                        'Main-Class': p.className
            }
            baseName = project.name + '-all-java11'
            archiveName = "${baseName}-${p.ext.shortVersion}.${extension}"
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            with jar
        }
    }

    jar {
        afterEvaluate { p ->
            archiveName = "${baseName}-${project.ext.shortVersion}.${extension}"
        }
    }

//    ext.getVersionName = { module, folder = '\\src\\main\\resources\\' ->
////    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
////    println "VersionCode is set to $code"
////    return code
//
//        def suffix = "-version.txt"
//        def nm = projectDir.absolutePath + folder + module + suffix
//        def f = new File((String) nm);
//        def time = System.currentTimeMillis()
//        if (!f.exists()) {
//            f = new File((String) nm)
//            f.write("0.1.0\n"+time)
//        }
//        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)\\s?.*")
//        def version = f.getText()
//        def matcherVersionNumber = patternVersionNumber.matcher(version)
//        matcherVersionNumber.find()
//        def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
//        def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
//        def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
//        def begin = majorVersion + "." + minorVersion
//        project.ext.shortVersion = begin
//        def newVer = begin + "." + (pointVersion + 1)
//        println("Version inc: " + version + " > " + newVer)
//
//        f.write(newVer+"\n"+time)
//        return newVer
//    }
    ext.getVersionName = { module, getShort = false, inc = false ->
        //    def code = project.hasProperty("versionCode") ? versionCode.toInteger() : -1
//    println "VersionCode is set to $code"
//    return code
        def fol = "\\src\\main\\resources\\"
        def folder = fol
        def suffix = "-version.txt"
        def nm = "$projectDir.absolutePath$folder$module$suffix"
        def f = file(nm)
        if (!f.exists()) {
            f = file(nm)
            f.write("$version\n" + System.currentTimeMillis())
        }
        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)")
        def lines = f.readLines()
        def version = lines.get(0)
        def matcherVersionNumber = patternVersionNumber.matcher(version)
        matcherVersionNumber.find()
        def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
        def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
        def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
        def shorter = "$majorVersion.$minorVersion"
        project.ext["shortVersion"] = shorter
        def longer
        if (inc) {
            longer = "$shorter.${pointVersion + 1}"
            f.write(longer + "\n" + System.currentTimeMillis())
            println("Version inc: $version > $longer")
        } else {
            longer = "$shorter.${pointVersion}"
        }
        project.ext["fullVersion"] = longer
        project.version = longer
        if (getShort) {
            return shorter
        }
        return longer
    }

    publishing {
        publications {
            maven(MavenPublication) {
                version = project.ext.shortVersion

                from components.java
            }
        }
    }

}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        //    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    }

}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
    implementation 'info.picocli:picocli:4.6.1'
}


//compileKotlin {
//    kotlinOptions.jvmTarget = "1.8"
//}
//compileTestKotlin {
//    kotlinOptions.jvmTarget = "1.8"
//}
